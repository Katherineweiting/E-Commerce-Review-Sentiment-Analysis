# -*- coding: utf-8 -*-
"""Final_Project_binary_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-P1lzq9qNnHoQQr1PHyDc7mOrPDYC3J

---
### Load in and visualize the data
"""

import pandas as pd

# read data from text files
review_df = pd.read_csv('Reviews.csv')
review_df

review_df.info()

review_df.drop(['Unnamed: 0'], axis = 1, inplace = True)

review_df.head()

# checking for duplicated entries
duplicates = review_df.duplicated().sum()
if  duplicates == 0:
    print("There are no duplicted rows in this data")
else:
    print('There are: ', str(duplicates), " duplicates")

review_df=review_df.drop_duplicates()

# checking for Null values
review_df["Review Text"].isnull().sum()

# drop Null values
review_df.dropna(subset=['Review Text'], inplace= True)

review_df

from sklearn.utils import resample

#create two different dataframe of majority and minority class
df_majority = review_df[(review_df['Recommended IND']==1)]
df_minority = review_df[(review_df['Recommended IND']==0)]

# upsample minority class
df_minority_upsampled = resample(df_minority,
                                 replace=True,    # sample with replacement
                                 n_samples=15539 , # to match majority class
                                 random_state=42)  # reproducible results

# Combine majority class with upsampled minority class
df_upsampled = pd.concat([df_minority_upsampled, df_majority])

df_upsampled

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize = (15, 6))
plt.subplot(1, 2, 1)
sns.countplot(x = df_upsampled['Recommended IND'], data = review_df)

plt.subplot(1, 2, 2)
plt.pie(x= df_upsampled['Recommended IND'].value_counts(), labels = ("1","0"), explode = (0, 0.08), shadow = True, autopct = '%1.2f%%')

plt.show()

reviews = df_upsampled["Review Text"]
labels = df_upsampled["Recommended IND"]

#reviews = review_df["Review Text"]
#labels = review_df["Recommended IND"]

import string

# Your text
all_reviews_text = '\n'.join(str(review).replace('\n', ' ') for review in df_upsampled['Review Text'].dropna())

# Removing punctuation
all_reviews_text_no_punct = all_reviews_text.translate(str.maketrans('', '', string.punctuation))

#import string

# Your text
#all_reviews_text = '\n'.join(str(review).replace('\n', ' ') for review in review_df['Review Text'].dropna())

# Removing punctuation
#all_reviews_text_no_punct = all_reviews_text.translate(str.maketrans('', '', string.punctuation))

all_reviews_text_no_punct

recommend_labels = df_upsampled['Recommended IND'].map({1: 'Recommended', 0: 'Not Recommended'})

# Join the labels into a single text
recommend_text = '\n'.join(label for label in recommend_labels)

#recommend_labels = review_df['Recommended IND'].map({1: 'Recommended', 0: 'Not Recommended'})

# Join the labels into a single text
#recommend_text = '\n'.join(label for label in recommend_labels)

print(all_reviews_text_no_punct[:1000])
print()
print(recommend_text[:20])

"""## Data pre-processing


First remove all punctuation, and then get all the text without the newlines and split it into individual words.
"""

from string import punctuation
import numpy as np

print(punctuation)

# get rid of punctuation
all_reviews_text = all_reviews_text_no_punct.lower()
all_text = ''.join([c if c not in punctuation else ' ' for c in all_reviews_text])

# split by new lines and spaces
reviews_split = all_text.split('\n')
all_text = ' '.join(reviews_split)
# create a list of words
words = all_text.split()

len(reviews_split)

words[:30]

"""### Encoding the words"""

# feel free to use this import
from collections import Counter

## Build a dictionary that maps words to integers
counts = Counter(words)
#print(counts)
vocab = sorted(counts, key=counts.get, reverse=True)
#print(vocab)
#TODO: Build a dictionary that maps words to integers by enumerating vocab
#for i, integer in enumerate(vocab[:100]):
#  print(i, integer)
vocab_to_int = {words:i for i, words in enumerate(vocab, 1)}
#print(vocab_to_int)

## use the dict to tokenize each review in reviews_split
## store the tokenized reviews in reviews_ints (which is a list)
reviews_ints = []
for review in reviews_split:
    reviews_ints.append([vocab_to_int[word] for word in review.split()])

# stats about vocabulary
print('Unique words: ', len((vocab_to_int)))
print()

# print tokens in first review
print('Tokenized review: \n', reviews_ints[:1])

"""### Encoding the labels

Convert labels from `Recommend` and `Unrecommend` to 1 and 0, respectively, and place those in a new list, `encoded_labels`.
"""

# 1=positive, 0=negative label conversion
labels_split = recommend_text.split('\n')
encoded_labels = np.array([1 if label == 'Recommended' else 0 for label in labels_split])

len(reviews_ints)

len(labels_split)

"""---
## Padding sequences
"""

def pad_features(reviews_ints, seq_length):
    ''' Return features of review_ints, where each review is padded with 0's
        or truncated to the input seq_length.
    '''

    # getting the correct rows x cols shape
    features = np.zeros((len(reviews_ints), seq_length), dtype=int)

    # for each review, I grab that review and
    for i, row in enumerate(reviews_ints):
        features[i, -len(row):] = np.array(row)[:seq_length]

    return features

# Test your implementation!

seq_length = 100

features = pad_features(reviews_ints, seq_length=seq_length)

## test statements - do not change - ##
assert len(features)==len(reviews_ints), "Your features should have as many rows as reviews."
assert len(features[0])==seq_length, "Each feature row should contain seq_length values."

# print first 10 values of the first 30 batches
print(features[:30,:10])

"""## Training, Validation, Test"""

split_frac = 0.8

## split data into training, validation, and test data (features and labels, x and y)

split_idx = int(len(features)*split_frac)
train_x, remaining_x = features[:split_idx], features[split_idx:]
train_y, remaining_y = encoded_labels[:split_idx], encoded_labels[split_idx:]

test_idx = int(len(remaining_x)*0.5)
val_x, test_x = remaining_x[:test_idx], remaining_x[test_idx:]
val_y, test_y = remaining_y[:test_idx], remaining_y[test_idx:]

## print out the shapes of your resultant feature data
print("\t\t\tFeature Shapes:")
print("Train set: \t\t{}".format(train_x.shape),
      "\nValidation set: \t{}".format(val_x.shape),
      "\nTest set: \t\t{}".format(test_x.shape))

"""# Baseline Model - Logistic Regression

"""

# Train the Logistic Regression model on the scaled data and print the model score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
lr = LogisticRegression()

# Fit the model on the training data
lr.fit(train_x, train_y)

# Predict on the validation set
pred_valid = lr.predict(val_x)

# Calculate accuracy on the validation set
accuracy_valid = accuracy_score(val_y, pred_valid)
print(f"Accuracy on validation set: {accuracy_valid * 100:.2f}%")

# Predict on the test set
pred_test = lr.predict(test_x)

# Calculate accuracy on the test set
accuracy_test = accuracy_score(test_y, pred_test)
print(f"Accuracy on test set: {accuracy_test * 100:.2f}%")

"""**Check your work**

With train, validation, and test fractions equal to 0.8, 0.1, 0.1, respectively, the final, feature data shapes should look like:
```
                    Feature Shapes:
Train set: 		 (20000, 200)
Validation set: 	(2500, 200)
Test set: 		  (2500, 200)
```

---
## DataLoaders and Batching
"""

import torch
from torch.utils.data import TensorDataset, DataLoader

# create Tensor datasets
train_data = TensorDataset(torch.from_numpy(train_x), torch.from_numpy(train_y))
valid_data = TensorDataset(torch.from_numpy(val_x), torch.from_numpy(val_y))
test_data = TensorDataset(torch.from_numpy(test_x), torch.from_numpy(test_y))

# dataloaders
batch_size = 50

# make sure SHUFFLE your training data
# drop_last=True will drop the last batch if the size is less than the given batch_size
train_loader = DataLoader(train_data, shuffle=True, batch_size=batch_size,  drop_last=True)
valid_loader = DataLoader(valid_data, shuffle=True, batch_size=batch_size, drop_last=True)
test_loader = DataLoader(test_data, shuffle=True, batch_size=batch_size, drop_last=True)

# obtain one batch of training data
dataiter = iter(train_loader)
sample_x, sample_y = next(dataiter)

print('Sample input size: ', sample_x.size()) # batch_size, seq_length
print('Sample input: \n', sample_x)
print()
print('Sample label size: ', sample_y.size()) # batch_size
print('Sample label: \n', sample_y)

"""---
# Sentiment Network (Binary)


"""

# First checking if GPU is available
train_on_gpu=torch.cuda.is_available()

if(train_on_gpu):
    print('Training on GPU.')
else:
    print('No GPU available, training on CPU.')

import torch.nn as nn

class SentimentRNN(nn.Module):
    """
    The RNN model that will be used to perform Sentiment analysis.
    """

    def __init__(self, vocab_size, output_size, embedding_dim, hidden_dim, n_layers, drop_prob=0.5):
        """
        Initialize the model by setting up the layers.
        """
        super(SentimentRNN, self).__init__()

        self.output_size = output_size
        self.n_layers = n_layers
        self.hidden_dim = hidden_dim

        #TODO: add embedding and LSTM layers
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.lstm = nn.LSTM(embedding_dim, hidden_dim, n_layers, dropout = drop_prob, batch_first = True)

        # dropout layer
        self.dropout = nn.Dropout(0.3)

        # linear and sigmoid layers
        self.fc = nn.Linear(hidden_dim, output_size)
        self.sig = nn.Sigmoid()


    def forward(self, x, hidden):
        """
        Perform a forward pass of our model on some input and hidden state.
        """
        batch_size = x.size(0)


        x = x.long()

        #TODO: compute embeddings and lstm_out
        embeds = self.embedding(x)
        lstm_out, hidden = self.lstm(embeds, hidden)

        lstm_out = lstm_out[:, -1, :] # getting the last time step output

        # dropout and fully-connected layer
        out = self.dropout(lstm_out)
        out = self.fc(out)
        # sigmoid function
        sig_out = self.sig(out)

        # return last sigmoid output and hidden state
        return sig_out, hidden


    def init_hidden(self, batch_size):
        ''' Initializes hidden state '''
        # Create two new tensors with sizes n_layers x batch_size x hidden_dim,
        # initialized to zero, for hidden state and cell state of LSTM
        weight = next(self.parameters()).data

        if (train_on_gpu):
            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda(),
                  weight.new(self.n_layers, batch_size, self.hidden_dim).zero_().cuda())
        else:
            hidden = (weight.new(self.n_layers, batch_size, self.hidden_dim).zero_(),
                      weight.new(self.n_layers, batch_size, self.hidden_dim).zero_())

        return hidden

"""## Instantiate the network"""

# Instantiate the model w/ hyperparams
vocab_size = len(vocab_to_int)+1 # +1 for the 0 padding + our word tokens
output_size = 1
embedding_dim = 100
hidden_dim = 256
n_layers = 2

net = SentimentRNN(vocab_size, output_size, embedding_dim, hidden_dim, n_layers)

print(net)

"""---
## Training
"""

# loss and optimization functions
lr = 0.005
criterion = nn.BCELoss()
optimizer = torch.optim.Adam(net.parameters(), lr=lr, weight_decay=1e-6)

# training params
epochs = 3

counter = 0
print_every = 100
clip=5 # gradient clipping
# move model to GPU, if available
if(train_on_gpu):
    net.cuda()

net.train()
# train for some number of epochs
for e in range(epochs):
    #initialize hidden state
    h = net.init_hidden(batch_size)
    # batch loop
    for inputs, labels in train_loader:
        counter += 1

        if(train_on_gpu):
            inputs, labels = inputs.cuda(), labels.cuda()

        # Creating new variables for the hidden state, otherwise
        # we'd backprop through the entire training history
        h = tuple([each.data for each in h])

        #1. TODO: get the output from the model
        output, h = net(inputs, h)

        #2. calculate the loss and perform backprop
        loss = criterion(output.squeeze(), labels.float())

        #3. zero accumulated gradients
        net.zero_grad()

        #4. Backpropagation
        loss.backward()
        # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.
        nn.utils.clip_grad_norm_(net.parameters(), clip)

        #5. Update weights
        optimizer.step()

        # loss stats
        if counter % print_every == 0:
            # Get validation loss
            val_h = net.init_hidden(batch_size)
            val_losses = []
            correct = 0
            total = 0
            net.eval()
            for inputs, labels in valid_loader:

                # Creating new variables for the hidden state, otherwise
                # we'd backprop through the entire training history
                val_h = tuple([each.data for each in val_h])

                if(train_on_gpu):
                    inputs, labels = inputs.cuda(), labels.cuda()

                output, val_h = net(inputs, val_h)
                val_loss = criterion(output.squeeze(), labels.float())

                val_losses.append(val_loss.item())
                predicted = (output.squeeze() >= 0.5).float()
                total += labels.size(0)
                correct += (predicted == labels).sum().item()
            val_acc=100*correct/total
            net.train()
            print("Epoch: {}/{}...".format(e+1, epochs),
                  "Step: {}...".format(counter),
                  "Loss: {:.6f}...".format(loss.item()),
                  "Val Loss: {:.6f}".format(np.mean(val_losses)),
                  "Val Acc:{:.6f}".format(val_acc))

import matplotlib.pyplot as plt

# Your data
iterations = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600]
loss = [0.693178, 0.628311, 0.681771, 0.430123, 0.290633, 0.206895, 0.282577, 0.451442, 0.359484, 0.240891, 0.050989, 0.120023, 0.16566, 0.207034, 0.038368, 0.150259]
val_loss = [0.779328, 0.793709, 0.624209, 0.530225, 0.403269, 0.323847, 0.358647, 0.424137, 0.283596, 0.262796, 0.266075, 0.180608, 0.223092, 0.226439, 0.228931, 0.320948]
epochs = range(1, 4)

# Plotting loss and validation loss
plt.figure(figsize=(10, 6))
plt.plot(iterations, loss, label='Training Loss')
plt.plot(iterations, val_loss, label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Iterations')
plt.ylabel('Loss')
plt.xticks(iterations)
plt.legend()
plt.show()

"""---
## Testing
"""

# Get test data loss and accuracy

test_losses = [] # track loss
num_correct = 0

# init hidden state
h = net.init_hidden(batch_size)

net.eval()
# iterate over test data
for inputs, labels in test_loader:

    # Creating new variables for the hidden state, otherwise
    # we'd backprop through the entire training history
    h = tuple([each.data for each in h])

    if(train_on_gpu):
        inputs, labels = inputs.cuda(), labels.cuda()

    # get predicted outputs
    output, h = net(inputs, h)

    # calculate loss
    test_loss = criterion(output.squeeze(), labels.float())
    test_losses.append(test_loss.item())

    # convert output probabilities to predicted class (0 or 1)
    pred = torch.round(output.squeeze())  # rounds to the nearest integer

    # compare predictions to true label
    correct_tensor = pred.eq(labels.float().view_as(pred))
    correct = np.squeeze(correct_tensor.numpy()) if not train_on_gpu else np.squeeze(correct_tensor.cpu().numpy())
    num_correct += np.sum(correct)


# -- stats! -- ##
# avg test loss
print("Test loss: {:.3f}".format(np.mean(test_losses)))

# accuracy over all test data
test_acc = num_correct/len(test_loader.dataset)
print("Test accuracy: {:.3f}".format(test_acc))